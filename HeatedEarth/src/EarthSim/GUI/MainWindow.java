/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package EarthSim.GUI;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

import ArgumentParser.Parser;
import EarthSim.ComponentType;
import EarthSim.FinalTemperatureGrid;
import EarthSim.ProcessingComponentListener;
import EarthSim.Presentation.Presentation;
import EarthSim.Presentation.earth.TemperatureGrid;
import EarthSim.SimulationEngine.SimulationEngine;

/**
 *
 * @author tbaxter
 */
public class MainWindow extends javax.swing.JFrame implements ProcessingComponentListener {	

	/**
	 * Required GUI ID
	 */
	private static final long serialVersionUID = 1L;

	private Parser parser;
	private SimulationEngine simulation;	
	private Presentation presentation;
	private boolean _hasInitiative = false;

	long startTime = 0;
	long endTime = 0;
	long startPauseTime = 0;
	long endPauseTime = 0;
	long totalPausedTime = 0;

	private GUIState _state = GUIState.IDLE;

	/**
	 * Creates new form MainWindow
	 */
	public MainWindow(String[] args) {
		this.parser = new Parser();
		try {
			this.parser.parse(args);
		} catch (Exception e) {
			e.printStackTrace();
		}

		initComponents();

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	private void initComponents() {
		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setMaximumSize(new Dimension(800, 600));
		setMinimumSize(new Dimension(800, 600));
		setPreferredSize(new Dimension(800, 600));

		// Setup the presentation and simulation components
		setup();		

		getContentPane().setLayout(null);

		jLabel1 = new javax.swing.JLabel();
		jLabel1.setBounds(59, 511, 83, 16);
		jLabel1.setHorizontalAlignment(SwingConstants.RIGHT);

		jLabel1.setText("Grid Spacing:");
		getContentPane().add(jLabel1);
		tfGridSpacing = new javax.swing.JTextField();
		tfGridSpacing.setText("15");
		tfGridSpacing.setBounds(147, 505, 55, 28);
		getContentPane().add(tfGridSpacing);
		jLabel4 = new javax.swing.JLabel();
		jLabel4.setBounds(207, 511, 60, 16);

		jLabel4.setText("degrees");
		getContentPane().add(jLabel4);
		jLabel3 = new javax.swing.JLabel();
		jLabel3.setBounds(480, 511, 185, 16);

		jLabel3.setText("Presentation Display Rate:");
		getContentPane().add(jLabel3);
		tfDisplayRate = new javax.swing.JTextField();
		tfDisplayRate.setBounds(695, 505, 100, 28);
		tfDisplayRate.setText("0");
		getContentPane().add(tfDisplayRate);
		jLabel2 = new javax.swing.JLabel();
		jLabel2.setBounds(5, 545, 137, 16);
		jLabel2.setHorizontalAlignment(SwingConstants.RIGHT);

		jLabel2.setText("Simulation Time Step:");
		getContentPane().add(jLabel2);
		tfTimeStep = new javax.swing.JTextField();
		tfTimeStep.setText("1");
		tfTimeStep.setBounds(147, 538, 55, 28);
		getContentPane().add(tfTimeStep);
		jLabel5 = new javax.swing.JLabel();
		jLabel5.setBounds(207, 545, 51, 16);

		jLabel5.setText("minutes");
		getContentPane().add(jLabel5);
		btnStart = new javax.swing.JButton();
		btnStart.setBounds(458, 539, 75, 29);
		btnStart.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(validateInput()) startSimulation();
			}
		});

		btnStart.setText("Start");
		getContentPane().add(btnStart);
		btnPause = new javax.swing.JButton();
		btnPause.setBounds(538, 539, 80, 29);
		btnPause.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				pauseSimulation();
			}
		});

		btnPause.setText("Pause");
		getContentPane().add(btnPause);
		btnResume = new javax.swing.JButton();
		btnResume.setBounds(623, 539, 88, 29);
		btnResume.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {				
				resumeSimulation();
			}
		});

		btnResume.setText("Resume");
		getContentPane().add(btnResume);
		btnStop = new javax.swing.JButton();
		btnStop.setBounds(720, 539, 75, 29);
		btnStop.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {							
				stopSimulation();
			}
		});

		btnStop.setText("Stop");
		getContentPane().add(btnStop);

		// Set default button states
		btnStart.setEnabled(true);
		btnPause.setEnabled(false);
		btnResume.setEnabled(false);
		btnStop.setEnabled(false);

		pack();

	}// </editor-fold>

	private void setup() {		

		// TEMPORARY FOR TESTING

		try {
			parser.setBufferLenght("20");
			parser.setInitiative(ComponentType.Simulation);
			parser.setPresentationShouldRunInOwnThread(true);
			parser.setSimulationShouldRunInOwnThread(true);
		} catch (Exception e) {			
			System.out.println("Parser Error: " + e.getMessage());
		}

		// END TEMPORARY
		
		DataBuffer<TemperatureGrid> buffer = new DataBuffer<TemperatureGrid>(parser.getBufferLength());

		simulation = new SimulationEngine(buffer, parser.simulationShouldRunInOwnThread());							
		presentation = new Presentation(buffer, new Dimension(800, 600), new Dimension(800, 600), new Dimension(800, 600), parser.presentationShouldRunInOwnThread());

		presentation.getEarthPanel().setBounds(5, 0, 800, 510);
		getContentPane().add(presentation.getEarthPanel());

		if(parser.getInitiative() == ComponentType.Presentation) {
			presentation.setInitiative(true);
			simulation.setInitiative(false);
			this.setInitiative(false);
			presentation.addListener(simulation);			
		}
		else if(parser.getInitiative() == ComponentType.Simulation) {
			presentation.setInitiative(false);
			simulation.setInitiative(true);
			this.setInitiative(false);			
			simulation.addListener(presentation);
		}
		else if(parser.getInitiative() == ComponentType.GUI) {
			presentation.setInitiative(false);
			simulation.setInitiative(false);
			this.setInitiative(true);
			simulation.addListener(this);
			presentation.addListener(this);
		}		
						
		try {
			buffer.Put(new FinalTemperatureGrid());
		} catch (Exception e) {			
			System.out.println("Error: " + e.getMessage());
		}			

		//presentation.process();				
		//simulation.process();				
	}


	/**
	 * @param args the command line arguments
	 */
	public static void main(final String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new MainWindow(args).setVisible(true);
			}
		});
	}

	/**
	 * @return the hasInitiative
	 */
	private boolean hasInitiative() {
		return _hasInitiative;
	}

	/**
	 * Sets the initiative property
	 * @param init determines if the initiative is set
	 */
	private void setInitiative(boolean init) {
		_hasInitiative = init;
	}

	/**
	 * Starts the simulation
	 */
	private void startSimulation() {
		// Set presentation parameters
		presentation.setDisplayRate(Integer.parseInt(tfDisplayRate.getText()));
		presentation.setSimulationTimeStep(Integer.parseInt(tfTimeStep.getText()));
		
		// Set simulation parameters
		simulation.SetGridSize(Integer.parseInt(tfGridSpacing.getText()));
		simulation.SetMinutesPerRotation(Integer.parseInt(tfTimeStep.getText()));
		
		simulation.process();
		presentation.process();

		// Start the simulation		
		simulation.Start();
		presentation.Start();
		
		// Start the first iteration if the GUI has the initiative
		if(parser.getInitiative() == ComponentType.GUI) {
			try {				
				simulation.Simulate();
			} catch (Exception e) {
				System.out.println("Simulation Error: " + e.getMessage());
			}
		}

		btnStart.setEnabled(false);
		btnPause.setEnabled(true);
		btnStop.setEnabled(true);
		btnResume.setEnabled(false);

		_state = GUIState.RUNNING;
	}

	/**
	 * Pauses the simulation
	 */
	private void pauseSimulation() {	

		// Pause the simulation
		presentation.Pause();
		simulation.Pause();

		btnStart.setEnabled(false);
		btnPause.setEnabled(false);
		btnStop.setEnabled(true);
		btnResume.setEnabled(true);

		_state = GUIState.PAUSED;
	}

	/**
	 * Resumes the simulation
	 */
	private void resumeSimulation() {	

		// Resume the simulation
		presentation.Resume();
		simulation.Resume();
		
		btnStart.setEnabled(false);
		btnPause.setEnabled(true);
		btnStop.setEnabled(true);
		btnResume.setEnabled(false);

		_state = GUIState.RUNNING;
	}

	/**
	 * Stops the simulation
	 */
	private void stopSimulation() {

		// Stop the simulation
		presentation.Stop();
		simulation.Stop();

		// Get memory usage
		Runtime runtime = Runtime.getRuntime(); //runtime (runtime?)
		runtime.gc();
		long memory = runtime.totalMemory() - runtime.freeMemory();
		System.out.println("Used memory in bytes is: " + memory);

		//System.out.println("Total simulation time in ms is :" + (endTime - startTime));

		btnStart.setEnabled(true);
		btnPause.setEnabled(false);
		btnStop.setEnabled(false);
		btnResume.setEnabled(false);

		_state = GUIState.IDLE;
		
	}

	/**
	 * Validates user input on the form
	 */
	private boolean validateInput() {

		// Check valid input
		if(!isValidInt(tfDisplayRate.getText())) {
			JOptionPane.showMessageDialog(null, "Display rate must be a valid integer value");
			return false;
		}

		if(!isValidInt(tfGridSpacing.getText())) {
			JOptionPane.showMessageDialog(null, "Grid spacing must be a valid integer value");
			return false;
		}

		if(!isValidInt(tfTimeStep.getText())) {
			JOptionPane.showMessageDialog(null, "Time step must be a valid integer value");
			return false;
		}	

		if(Integer.parseInt(tfGridSpacing.getText()) < 1 || Integer.parseInt(tfGridSpacing.getText()) > 180) {
			JOptionPane.showMessageDialog(null, "Grid spacing must be between 1 and 180 degrees");
			return false;
		}

		if(Integer.parseInt(tfTimeStep.getText()) < 1 || Integer.parseInt(tfTimeStep.getText()) > 1440) {
			JOptionPane.showMessageDialog(null, "Time step must be between 1 and 1440 minutes (1 day)");
			return false;
		}

		return true;
	}

	/**
	 * Checks if string is a valid integer value
	 * 
	 * @param intString a {@code String} containing the input to be validated
	 * @return true if input can be parsed into a valid integer
	 */
	private boolean isValidInt(String intString) {

		try {
			Integer.parseInt(intString);
			return true;
		} catch (NumberFormatException ex) {
			return false;
		}
	}

	/**
	 * Gets the current state of the program
	 * 
	 * @return current state of the program
	 */
	public GUIState getGUIState() {
		return _state;
	}

	// Variables declaration - do not modify                     
	private javax.swing.JButton btnPause;
	private javax.swing.JButton btnResume;
	private javax.swing.JButton btnStart;
	private javax.swing.JButton btnStop;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JTextField tfDisplayRate;
	private javax.swing.JTextField tfGridSpacing;
	private javax.swing.JTextField tfTimeStep;
	// End of variables declaration         

	public enum GUIState {		
		IDLE,
		RUNNING,
		PAUSED				
	}

	@Override
	public void onProcessComplete(ComponentType origin) {
		
		if(origin == ComponentType.Presentation) {
			System.out.println("Simulation: No Initiative");
			try {
				simulation.Simulate();
			} catch (Exception e) {
				System.out.println("Simulation Error: " + e.getMessage());
			}
		}
		else if(origin == ComponentType.Simulation) {
			System.out.println("Presentation: No Initiative");
			presentation.Present();
		}		
		
	}
}
